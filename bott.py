import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from db_utils import (
    db_init, add_user, get_user, update_user_lesson,
    get_material_by_day, get_lessons_count
)

from attestation import (
    start_attestation, process_attestation, process_interview, get_state,
    STATE_ATT_QUESTION, STATE_INTERVIEW
)

from admin import is_admin, get_all_interviews, get_interviews_file, get_active_users, reset_db

TOKEN = '7785563549:AAG9MXHaIaGLGwAtLaScrOO-_1q7DUAG-Gk'
DB_PATH = "insurancebot.db"
PROMO_CODE = 'INSUR2024'

# –ú–µ–Ω—é
menu_keyboard = [
    ["üìö –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫", "üéü –ü—Ä–æ–º–æ–∫–æ–¥"],
    ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìù –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"],
    ["üè¢ –í–∞–∫–∞–Ω—Å–∏–∏", "üåê –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏"],
    ["üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"]
]
menu_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    if user:
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=menu_markup
        )
    else:
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        )
        return

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    user = get_user(user_id)
    state = get_state(context, user_id)

    if state == STATE_ATT_QUESTION:
        next_q = process_attestation(context, user_id, text)
        await update.message.reply_text(next_q)
        return

    if state == STATE_INTERVIEW:
        result = process_interview(context, user_id, text)
        await update.message.reply_text(result, reply_markup=menu_markup)
        return

    if not user:
        add_user(user_id, text.strip())
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=menu_markup
        )
        return

    if text == "üìö –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫":
        await send_lesson(update, context)
        user = get_user(user_id)
        lessons_count = get_lessons_count()
        if user["current_lesson"] > lessons_count and not get_state(context, user_id):
            first_q = start_attestation(context, user_id)
            await update.message.reply_text(
                "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é!\n" + first_q
            )
        return
    elif text == "üéü –ü—Ä–æ–º–æ–∫–æ–¥":
        await send_promo(update, context)
    elif text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await send_progress(update, context)
    elif text == "üìù –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ":
        await send_interview(update, context)
    elif text == "üè¢ –í–∞–∫–∞–Ω—Å–∏–∏":
        await update.message.reply_text("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏: https://bima.tj/vacancies", reply_markup=menu_markup)
    elif text == "üåê –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏":
        await update.message.reply_text("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: https://bima.tj/", reply_markup=menu_markup)
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await reset_progress(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=menu_markup)

async def send_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    lesson_number = user["current_lesson"]
    lesson = get_material_by_day(lesson_number)
    if lesson:
        if lesson['type'] == 'text':
            text = lesson['text']
            if lesson['link']:
                text += f"\n\n–°—Å—ã–ª–∫–∞: {lesson['link']}"
            await update.message.reply_text(text, reply_markup=menu_markup)
        elif lesson['type'] == 'file':
            file_path = lesson['file_paths']
            await update.message.reply_document(document=open(file_path, 'rb'), caption=lesson['text'], reply_markup=menu_markup)
        update_user_lesson(update.effective_user.id, lesson_number + 1)
    else:
        await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç. –í—ã –º–æ–ª–æ–¥–µ—Ü!", reply_markup=menu_markup)

async def send_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    lessons_count = get_lessons_count()
    if user and user['current_lesson'] > lessons_count:
        await update.message.reply_text(
            f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –≤–µ—Å—å –∫—É—Ä—Å!\n–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {PROMO_CODE}',
            reply_markup=menu_markup
        )
    else:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —É—Ä–æ–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.',
            reply_markup=menu_markup
        )

async def send_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    lessons_count = get_lessons_count()
    if user:
        await update.message.reply_text(
            f"–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {min(user['current_lesson']-1, lessons_count)}/{lessons_count} —É—Ä–æ–∫–æ–≤.",
            reply_markup=menu_markup
        )

async def send_interview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    lessons_count = get_lessons_count()
    if user and user['current_lesson'] > lessons_count:
        await update.message.reply_text(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∞!\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=menu_markup
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —É—Ä–æ–∫–∏, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.",
            reply_markup=menu_markup
        )

async def reset_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("UPDATE users SET current_lesson=1 WHERE telegram_id=?", (telegram_id,))
    con.commit()
    con.close()
    if telegram_id in context.user_data:
        del context.user_data[telegram_id]
    await update.message.reply_text(
        "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫'.",
        reply_markup=menu_markup
    )

# --- –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ---

async def admin_interviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text(get_all_interviews())

async def admin_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    file = get_interviews_file()
    if file:
        await update.message.reply_document(file, filename="interviews.csv")
        file.close()
    else:
        await update.message.reply_text("–§–∞–π–ª —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text(get_active_users())

# --- –°–ë–†–û–° –ë–ê–ó–´ –î–ê–ù–ù–´–• ---

async def admin_reset_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    msg = reset_db()
    await update.message.reply_text(msg)

# --- –ö–û–ù–ï–¶ –ê–î–ú–ò–ù –ë–õ–û–ö–ê ---

def main():
    db_init()
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset_progress))
    application.add_handler(CommandHandler("admin_interviews", admin_interviews))
    application.add_handler(CommandHandler("admin_file", admin_file))
    application.add_handler(CommandHandler("admin_users", admin_users))
    application.add_handler(CommandHandler("admin_reset_db", admin_reset_db))  # <-- –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.run_polling()

if __name__ == '__main__':
    main()
